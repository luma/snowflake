
1. We're not really making best use of Redis.
		Redis can perform many data structure type operations directly on values, yet our code is
		written mostly in a traditional ORM fashion: We retrieve data, operate on it, then save it.
		Once we really start making use of Redis we can skip the first step (unless the user actually
		wants to retrieve the data), and perform the last two as a single atomic operation.
		
		1.1. When Change fields we could save the changes immediately, rather than waiting for a save? That could be annoying, though. As many operations are supposed to be Atomic.

2. Atomic Operations and Transactions:
			See Watch: http://code.google.com/p/redis/wiki/MultiExecCommand
3. Pretty much every time I save a property I assume the save succeeds, but I'm not actually checking. This could be more difficult to workaround as I'm also pipelining the commands. Relates to 1 and 7. More thought needed...
4. The definition of the schema comes from the Node class, if the Node class is changed in certain ways (say changing a property from a set to a string) it could cause issues with the existing data.
5. Property and Relationship names can clash, we should assert to avoid clashes
6. The Relationships and Properties code is very similar, we need to reduce the duplication.
7. The hash properties are never saved a property as a time, the entire hash is saved as once. All other properties can be modified using atomic operations. 
I should split the dsl into hash properties and non-hash properties. Hash properties use the normal modify and bulk save workflow as Datamapper. Non-hash properties
allow operations to be performed and serialised immediately.
8. We need to allow custom hash fields, i.e. ones that were not predefined using the property method. The use cases for both are:
		* Predefined: expected fields, can defined validation/etc
		* Non-predefined: unexpected fields. Dynamically created.
Can we defined types on non-predefined?